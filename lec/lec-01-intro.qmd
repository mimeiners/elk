# Einleitung

## Lernziele des Moduls

* Einblicke in mikroelektronische Systeme

* Analyse und Funktion von Halbleiterbauelementen
  * Halbleiterphysik
  * Modellbildung
  * Netzwerkanalyse/-synthese

* Anwendung von SPICE in der Schaltunganalyse
  * Spezifikation
  * Partitionierung
  * Design

* Einsatz von Entwicklungsboards, Embedded Systems / System-on-Chip (SoC)
  * STEMlab von [Red Pitaya](https://www.redpitaya.com)

## Wissenschaftliches Rechnen

* [Python](https://www.anaconda.com/download/)
* [Matlab](https://de.mathworks.com)
* [Gnu Octave](https://www.gnu.org/software/octave/)
* [Command-line tools](http://jeroenjanssens.com/2013/09/19/seven-command-line-tools-for-data-science.html) 

## Schaltungsentwurf (EDA Tools)

* PCB / System Design
  * [LTspice](https://www.analog.com/en/design-center/design-tools-and-calculators/ltspice-simulator.html)
  * [KiCad EDA](https://www.kicad.org/)
  * [Altium Designer](https://www.altium.com/de/altium-designer)
  * [SiemensEDA PCB tools](https://eda.sw.siemens.com/en-US/pcb/products/)
  * [cadence System Design & Analysis](https://www.cadence.com/en_US/home/tools/system-design-and-analysis.html)

* IC / Silicon Design
  * [IIC-OSIC-TOOLS (open-source)](https://github.com/iic-jku/IIC-OSIC-TOOLS)
  * [SiemensEDA IC tools](https://eda.sw.siemens.com/en-US/ic/products/)
  * [cadence IC Design & Verification](https://www.cadence.com/en_US/home/tools/design-excellence.html)
  * [synopsys silicon design (IC)](https://www.synopsys.com/silicon-design.html)

## Betriebssystem (OS) - Werkzeuge (Tools)

* [SSH (Secure Shell)](https://de.wikipedia.org/wiki/Secure_Shell)
* [Microsoft-Terminal](https://github.com/microsoft/terminal)
* [Microsoft-PowerShell](https://learn.microsoft.com/de-de/powershell/scripting/learn/ps101/01-getting-started?view=powershell-7.4)
* [MacOS-Terminal](https://iterm2.com)
* [Linux/MacOS zsh-tools](https://ohmyz.sh)
* [Linux/MacOS bash-it](https://bash-it.readthedocs.io/en/latest/)
* [Git (Versionskontrolle)](https://git-scm.com)
* [TortoiseGit – Windows Shell Interface to Git](https://tortoisegit.org/)

## Code Editoren

* [Visual Studio Code](https://code.visualstudio.com)
* [Notepad++](https://notepad-plus-plus.org) (Windows)
* [Emacs](https://www.gnu.org/software/emacs/)	
* [Vim](https://www.vim.org)

## Datenverarbeitung / Data Sciences

### Dateisystem / Journaled File System

*   Ordner / Directories
*   Dateien / Files

### Tabellenformate / Rectangular Data

*   Comma-Separated-Values (CSV), Tab-Separated-Values (TSV)
*   [csvkit: A suite of utilities for converting to and working with CSV, the king of tabular file formats.](https://github.com/wireservice/csvkit)
*   [miller: Miller is like awk, sed, cut, join, and sort for name-indexed data such as CSV, TSV, and tabular JSON](https://github.com/johnkerl/miller)
*   Spreadsheet (.xlsx, .ods)


### [Serialisation](https://en.wikipedia.org/wiki/Serialization)

*   [Data Serialization — The Hitchhiker's Guide to Python](https://docs.python-guide.org/scenarios/serialization/)
*   [JSON](https://www.json.org/json-en.html)
*   [MessagePack: It's like JSON. but fast and small.](https://msgpack.org/)

### Spezielle Formate / Data Frames

*   [Mastering Python Dictionaries: Efficient Data Storage and Retrieval - Adventures in Machine Learning](https://www.adventuresinmachinelearning.com/mastering-python-dictionaries-efficient-data-storage-and-retrieval/)
*   [MAT-File Versions - MATLAB & Simulink - MathWorks Deutschland](https://de.mathworks.com/help/matlab/import_export/mat-file-versions.html)
*   [HDF5 Or How I Learned To Love Data Compression And Partial I/O](https://www.hdfgroup.org/2018/06/15/hdf5-or-how-i-learned-to-love-data-compression-and-partial-i-o/)
*   [Was ist Apache Parquet?](https://www.databricks.com/de/glossary/what-is-parquet)
*   [Feather File Format](https://arrow.apache.org/docs/python/feather.html)
*   [pola-rs/polars: Dataframes powered by a multithreaded, vectorized query engine](https://github.com/pola-rs/polars)
*   [ibis-project/ibis: Portable Python dataframe library](https://github.com/ibis-project/ibis)

### Embedded [DB-Engines](https://db-engines.com)

* [SQL](https://en.wikipedia.org/wiki/SQL), z.B. [SQLite](https://en.wikipedia.org/wiki/SQLite)
* [OLAP](https://en.wikipedia.org/wiki/Online_analytical_processing), z.B. [DuckDB](https://duckdb.org/why_duckdb)


## Schreibst Du noch oder TeXst Du schon?

* [MikTeX (Windows, MacOS, Linux)](https://miktex.org/)
* [MacTeX (MacOS)](https://www.tug.org/mactex/)
* [TeXLive (Linux)](http://tug.org/texlive/)


## LaTeX Editoren

* IDE's
  * [TeXStudio](http://www.texstudio.org)
  * [TeXMaker](http://www.xm1math.net/texmaker/)
  * [TeXWorks](http://www.tug.org/texworks/)

* Kollaborative Frameworks
  * [ShareLaTeX, Online LaTeX](https://www.sharelatex.com/)
  * [CoCalc - Online LaTeX](https://cocalc.com/doc/latex-editor.html)


## Literaturverwaltung und LaTeX

* [Citavi im Detail > Titel exportieren > Export nach BibTeX](https://www1.citavi.com/sub/manual5/de/exporting_to_bibtex.html)
* [RefWorks - Library Guide Univ. Melbourne](https://unimelb.libguides.com/c.php?g=565734\&p=3912294)
* [Benutzerdefinierte BibTex-Keys mit Zotero | nerdpause](https://nerdpause.de/benutzerdefinierte-bibtex-keys-mit-zotero/)
* [JabRef - Library Guide Univ. Melbourne](https://unimelb.libguides.com/c.php?g=565734\&p=3897117)
* [EndNote - Library Guide Univ. Melbourne](https://unimelb.libguides.com/latexbibtex/endnote)


## Betriebssystem (OS) - Werkzeuge (Tools)

* [SSH (Secure Shell)](https://de.wikipedia.org/wiki/Secure_Shell)
* [Microsoft-Terminal](https://github.com/microsoft/terminal)
* [Microsoft-PowerShell](https://learn.microsoft.com/de-de/powershell/scripting/learn/ps101/01-getting-started?view=powershell-7.4)
* [MacOS-Terminal](https://iterm2.com)
* [Linux/MacOS zsh-tools](https://ohmyz.sh)
* [Linux/MacOS bash-it](https://bash-it.readthedocs.io/en/latest/)
* [Git (Versionskontrolle)](https://git-scm.com)
* [TortoiseGit – Windows Shell Interface to Git](https://tortoisegit.org/)

## Experimentelle Arbeit - Entwurf elektronischer Systeme

Analyse und Synthese von elektronischen Bauelementen und Systemen mit 

* Modellbildung auf Systemebene / Verhaltensmodellierung
  
* Simulation auf Schaltungsebene / SPICE

* Charakterisierung auf Hardwareebene mit

  * [Analog System Lab Kit (ASLK) Pro](https://aslk-pro.readthedocs.io/de/latest/)

  * [Red Pitaya's STEMlab 125-14/10](https://redpitaya.readthedocs.io/en/latest/developerGuide/125-14/top.html)

* Technische Dokumentation mit [quarto](https://quarto.org)


## Reiseaussichten

Dies ist der **Beginn eines Prozesses**,

besser noch, **eines Abenteuers**.


## Reiseziele

* Mehr über Signale wissen, die in elektronischen Systemen verarbeitet werden.

* Schaltungsdiagramme lesen können.

* Wissen über grundlegende Blöcke eines Systems aneignen.

* Wissen, wie Transistoren arbeiten und in modernen integrierten Technologien hergestellt werden.

* Eigenarten der Modellierung mikroelektronischer Bauelemente und der physikalischen und chemischen Prinzipien im
  Herstellungsprozess kennenlernen. 


## Reisebedingungen

*Anwendung Ihres Werkzeugkastens.* 
* Grundlagen der Elektrotechnik/Physik

* Elektromagnetische Wellen

* Angewandte Mathematik und Systemtheorie

* Trainingswille

* Pioniergeist

* Spa{\ss}


*Schnallen Sie sich an, die Reise beginnt ...*

## Frontend Phasen

## Backend Phasen

* Packaging

* Zuverlässigkeit = Qualität auf Zeit

* Testing auf Wafer Level, known good die (KGD)

  * Burn-in und Accelerated Aging (thermischer Stress, Arrhenius Gesetz)
  
  * Automatic Test Equipment (ATE)
    * System Probe
    * Interconnect Test
    * Build-in Self-Test (BIST)


* Statistische Datenanalyse und Yield Prognosen

  * Ausfallrate FIT (failure in time)
  
  * Badewannenkurve


## Sie werden Experte

*Leistungsmerkmale.* 

* Hintergrundwissen
  * Systemverständnis, Architektur, Herstellungsverfahren, Implementation

* Unterbewusste Kompetenz
  * Abgespeicherte Erfahrungen aus Erfolgsgeschichten und Misserfolgen

* Spezialwissen
  * Berufsspezifisches Wissen

* Teamwork Haltung
  * Kommunikationsfähigkeit, Berichtswesen und technische Präsentation

* Kreativität

* Tool-Kenntnisse


## Evolution von Produkten

* Angetrieben durch Technologieverbesserung
  * Kosten (größere Chips, geringere Größe der Merkmale, bessere Ausbeute)
  * Leistung (neue Bauteile, höhere Geschwindigkeit, weniger Stromverbrauch)

* Angetrieben durch Verbesserung der Entwurfsmethodik
  * Architektur (Leistung, Funktionen)
  * CAD (Entwicklungskosten, Time-to-Market)

* Komplexität der Designs verdoppelt sich jedes Jahr (Moore's Gesetz)

* Rolle von CAD
  * Verbesserung der Produktivität von Konstruktionsprozessen
  * Reduzierung der Komplexität für den Konstrukteur
  * Sicherstellung des ordnungsgemäßen Betriebs der Geräte


## EDA Kompetenz

* EDA-Anbieter (Tool-Entwickler)
  * Identifikation von Entwurfsaufgaben, Bedarf an Werkzeugen
  * Entwicklung von Strategien und Algorithmen
  * Implementierung von Software-Werkzeugen
  * Verifikation der Stabilität und Funktionalität der Software-Tools

* IC-Hersteller
  * Entscheidungsplanung, welches Tool die Produktivität steigern könnte
  * EDA-Tool-Manager, Installation und Wartung
  * Experten für Softwareeinsatz, Anwendung in Produktdesign und -entwicklung

* Dozenten und Studenten
  * Jobchancen
  * Notwendigkeit, auf dem Laufenden zu bleiben


## Design-/Entwurfsmethodik

* Full Custom - vollständig manuell: ASIC
  * Überwiegend analoge Schaltungen
  * Einfache digitale Gatter
  * Volle Kontrolle, aber lange Entwicklungszeit (bis zu Jahren)

* Semi-custom: ASIC-Fertigung mit Verwendung von vorgefertigten Teilen
  * Standardzellen, Makrozellen, IP's
  * Wiederverwendung von vordefinierten Blöcken oder Maskensätzen
  * Eingeschränkte Kontrolle/Flexibilität, aber kürzere Entwicklungszeit (bis zu Wochen)

* Vollständig automatisiert: Keine Fertigung, reprogrammierbare ASICs
  * FPGA, PLA
  * Ausschließlich digitale Schaltungen
  * Schnelles Prototyping
